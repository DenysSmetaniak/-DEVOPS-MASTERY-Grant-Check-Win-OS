#!/usr/bin/node

const { exec } = require("child_process");
const readline = require("readline");
const https = require("https");

// Settings for sending an HTTP request
const options = {
    hostname: "dtapi.if.ua",
    port: 443,
    path: "/answer.php",
    method: "POST",
    headers: {
        "Content-type": "application/json;charset=utf8",
    },
};

// Colors for the console
const COLOR = {
    FgRed: "\x1b[31m",
    FgGreen: "\x1b[32m",
    FgYellow: "\x1b[33m",
    FgBlue: "\x1b[34m",
    FgWhite: "\x1b[37m",
    Reset: "\x1b[0m",
};

// Greetings
console.log(COLOR.FgGreen, "DevOps Joint Course 2025 [Script #2]");
console.log(COLOR.FgYellow, "(c) Yuriy Bezgachnyuk 2025");
console.log(COLOR.Reset);

// Interface for user data entry
const question = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

// Function to get the system kernel version
function getKernelVersion(callback) {
    const isWindows = process.platform === "win32";

    if (isWindows) {
        // Command to get the version of the Windows kernel
        exec("cmd /c ver", (error, stdout) => {
            if (error) {
                console.log(COLOR.FgRed, `Error: ${error.message}`);
                return callback(null);
            }

            const versionMatch = stdout.match(/\[.*\]/);
            const version = versionMatch ? versionMatch[0].replace(/\[|\]/g, '').trim() : stdout.trim();
            callback(version);
        });
    } else {
        // Command for Unix-like systems
        exec("uname -r", (error, stdout) => {
            if (error) {
                console.log(COLOR.FgRed, `Error: ${error.message}`);
                return callback(null);
            }
            callback(stdout.trim());
        });
    }
}

// The main part of the script
question.question("Please Enter the kernel release of your system: ", (userInput) => {
    console.log(COLOR.FgGreen, `Thank you for your input: ${userInput}`);
    question.close();

    getKernelVersion((kernelVersion) => {
        if (!kernelVersion) {
            console.log(COLOR.FgRed, "Failed to retrieve kernel version. Please try again.");
            return;
        }

        // Comparison of the entered value with the real version
        if (userInput.trim() !== kernelVersion) {
            console.log(COLOR.FgRed, "Your answer is incorrect");
            console.log(COLOR.Reset, "The result hasn't been saved! You can try again");
            return;
        }

        console.log(COLOR.FgGreen, "You are the Rock!");

        // Sending data to the server
        const requestData = {
            answer: userInput,
            script_answer: kernelVersion,
            additional_data: `USER: ${process.env.USER} PWD: ${process.env.PWD} SHELL: ${process.env.SHELL}`,
        };

        const req = https.request(options, (res) => {
            console.log(COLOR.Reset);
            console.log(`\nStatus: ${res.statusCode}`);
            res.on("data", (chunk) => {
                process.stdout.write(chunk);
            });
        });

        req.on("error", (error) => {
            console.log(COLOR.FgRed, "Something went wrong when sending data to the server.");
            console.log(COLOR.FgWhite, "Please try again later.");
            console.log(COLOR.Reset);
        });

        req.write(JSON.stringify(requestData));
        req.end();
    });
});
